 const storageService: IStorageService = {
        async getRulesForWorkItemType(id: string): Promise<RuleDocument | undefined> {
          switch (id) {
            case WorkItemReferenceNames.Task: {
              const doc: RuleDocument = {
                id: WorkItemReferenceNames.Task,
                rules: [
                  {
                    id: '1',
                    allChildren: false,
                    childState: 'Active',
                    parentNotState: ['Active', 'Resolved', 'Closed'],
                    parentTargetState: 'Active',
                    parentType: WorkItemReferenceNames.UserStory,
                    workItemType: WorkItemReferenceNames.Task
                  }
                ]
              };
              return Promise.resolve(doc);
            }
          }
          return Promise.reject();
        }
      } as IStorageService;
      const workItemService: IWorkItemService = {
        getWorkItemTypes() {
          return Promise.resolve(getWorkItemTypes());
        },
        getWorkItem(id: number) {
          switch (id) {
            case 11: {
              return Promise.resolve(getWorkItem(11, WorkItemReferenceNames.Task, 'Active'));
            }
          }
        },
        getParentForWorkItem(id: number) {
          switch (id) {
            case 11: {
              return Promise.resolve(getWorkItem(9, WorkItemReferenceNames.UserStory, 'New'));
            }
          }
        }
      } as IWorkItemService;