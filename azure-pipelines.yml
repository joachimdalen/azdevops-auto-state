parameters:
  - name: taskVersion
    displayName: 'Task Version'
    type: string
    default: $(Task.Extension.Version)
  - name: deployToDev
    displayName: 'Deploy to DEV instead of QA'
    type: boolean
    default: false

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - .github/*
      - .azext/*
      - .vscode/*
      - .ci/*
      - docs/*
pr: none
pool:
  vmImage: ubuntu-latest

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  marketplaceServiceConnection: 'marketplace-joachim-dalen'

stages:
  - stage: 'run_tests'
    displayName: Test & Build
    jobs:
      - job:
        steps:
          - template: .ci/install.template.yml
          - template: .ci/run-tests.template.yml

  - stage: package_dev
    displayName: '[DEV] Package'
    dependsOn: 'run_tests'
    condition: and(succeeded(), eq(${{ parameters.deployToDev }}, true),  eq(variables.isMaster, false))
    variables:
      - group: 'mp-auto-state-dev'
    jobs:
      - template: .ci/build-extension-artifact.template.yml
        parameters:
          extensionEnv: dev
          taskVersion: ${{ parameters.taskVersion }}
          generateVersionChangelog: false

  - stage: publish_dev
    displayName: '[DEV] Publish'
    dependsOn: 'package_dev'
    condition: and(succeeded(), eq(${{ parameters.deployToDev }}, true),  eq(variables.isMaster, false))
    variables:
      - group: 'mp-auto-state-dev'
    jobs:
      - template: .ci/publish-extension.template.yml
        parameters:
          pipelineEnv: auto-state-dev-env
          extensionVisibility: private

  - stage: package_qa
    displayName: '[QA] Package'
    dependsOn: 'run_tests'
    condition: and(succeeded(), eq(${{ parameters.deployToDev }}, false),  eq(variables.isMaster, false))
    variables:
      - group: 'mp-auto-state-qa'
    jobs:
      - template: .ci/build-extension-artifact.template.yml
        parameters:
          extensionEnv: qa
          taskVersion: ${{ parameters.taskVersion }}
          generateVersionChangelog: false

  - stage: publish_qa
    displayName: '[QA] Publish'
    dependsOn: 'package_qa'
    condition: and(succeeded(), eq(${{ parameters.deployToDev }}, false),  eq(variables.isMaster, false))
    variables:
      - group: 'mp-auto-state-qa'
    jobs:
      - template: .ci/publish-extension.template.yml
        parameters:
          pipelineEnv: auto-state-qa-env
          extensionVisibility: private

  - stage: verify_changelog
    dependsOn: 'run_tests'
    condition: and(succeeded(), eq(variables.isMaster, true))
    displayName: 'Check changelog'
    jobs:
      - job:
        steps:
          - task: GitGuardChanges@0
            displayName: '[PROD] Verify changelog'
            inputs:
              sourceCommitHash: 'tag:v*[!-qa]'
              matchPattern: '.azext/changelog-prod.json'
              targetCommitHash: 'HEAD'
              matchStrategy: 'single'
              changed: true
              breakOnFailure: true

  - stage: package_prod
    displayName: '[PROD] Package'
    dependsOn: 'verify_changelog'
    condition: and(succeeded(), eq(variables.isMaster, true))
    variables:
      - group: 'mp-auto-state-prod'
    jobs:
      - template: .ci/build-extension-artifact.template.yml
        parameters:
          extensionEnv: prod
          taskVersion: ${{ parameters.taskVersion }}

  - stage: publish_prod
    displayName: '[PROD] Publish'
    dependsOn: 'package_prod'
    condition: and(succeeded(), eq(variables.isMaster, true))
    variables:
      - group: 'mp-auto-state-prod'
    jobs:
      - template: .ci/publish-extension.template.yml
        parameters:
          pipelineEnv: auto-state-prod-env
          extensionVisibility: public_preview
